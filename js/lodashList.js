var functions = [{
  "chunk" : {
    "id":"1",
    "name": "chunk(array, [size=1])",
    "description" : "Creates an array of elements split into groups the length of size. If array can 't be split evenly, the final chunk will be the remaining elements.<br><br>",
    "arguments" : "Arguments<br>array(Array): The array to process.<br> [size = 1](number): The length of each chunk<br></br>",
    "returns" : "Returns<br>(Array): Returns the new array of chunks.<br></br>",
    "exsample": "Exsample<br>chunk(['a', 'b', 'c', 'd'], 2);<br> // => [['a', 'b'], ['c', 'd']]<br><br>chunk(['a', 'b', 'c', 'd'], 3);<br>// => [['a', 'b', 'c'], ['d']]',)",
    "solution" : "chunkFunction",
    "pastebin": "<iframe src='https://pastebin.com/embed_iframe/AebAuNPs' style='border:none;width:100%'></iframe>",
  },
  "compact" : {
    "id" : "2",
    "name" : "compact(array)",
    "description" : "Creates an array with all falsey values removed.The values false, null, 0, '', undefined, and NaN are falsey.<br><br>Arguments<br>array(Array): The array to compact.<br>Returns<br><br>(Array): Returns the new array of filtered values. <br><br>Example<br>compact([0, 1, false, 2, '', 3]);<br>// => [1, 2, 3]",
    "arguments" : "Arguments<br>array (Array): The array to concatenate. <br> [values] (...*): The values to concatenate.<br><br>",
    "returns" : "Returns<br>(Array): Returns the new concatenated array.",
    "exsample" : "compact([0, 1, false, 2, '', 3]);<br> // => [1, 2, 3]", 
    "solution": "compactFunction",
    "pastebin": "<iframe src='https://pastebin.com/embed_iframe/6k0zb5xz' style='border:none;width:100%'></iframe>",
  },
  "concat" : {
    "id":"3",
    "name" : "concat(array, [values])",
    "description" : "Creates a new array concatenating array with any additional arrays and/or values.<br><br>",
    "arguments" : "Arguments<br>array (Array): The array to concatenate.<br>[values] (...*): The values to concatenate.<br><br>",
    "returns" : "Returns<br>Array): Returns the new concatenated array.<br><br>",
    "exsample" : "var array = [1];<br>var other = _.concat(array, 2, [3], [[4]]);<br>console.log(other);<br>// => [1, 2, 3, [4]]<br>console.log(array);<br>// => [1]", 
    "solution": "concatFunction",
    "pastebin": "<iframe src='https://pastebin.com/embed_iframe/dnJtGdT4' style='border:none;width:100%'></iframe>",
  },
  "difference" : {
    "id":"4",
    "name" : "difference(array, [values])",
    'description' : "Creates an array of array values not included in the other given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array.<br><br>",
    "arguments" : "Arguments<br>array (Array): The array to inspect.<br>[values] (...Array): The values to exclude.<br><br>",
    "returns" : "Returns<br>(Array): Returns the new array of filtered values.<br><br>",
    "exsample" : "difference([2, 1], [2, 3]);<br>// => [1]", 
    "solution": "differenceFunction",
    "pastebin": "<iframe src='https://pastebin.com/embed_iframe/PPpt7FGs' style='border:none;width:100%'></iframe>",
  },

  "drop" : {
    "id":"5",
    "name" : "drop(array, [n=1])",
    'description' : "Creates a slice of array with n elements dropped from the beginning.<br><br>",
    "arguments" : "Arguments<br>array (Array): The array to query.<br>[n=1] (number): The number of elements to drop.<br><br>",
    "returns" : "Returns<br>(Array): Returns the slice of array.<br><br>",
    "exsample" : "drop([1, 2, 3]);<br>// => [2, 3]<br>// => [1]<br><br>drop([1, 2, 3], 2);<br>// => [3]<br><br>drop([1, 2, 3], 0);<br>// => [1, 2, 3]", 
    "solution": "dropFunction",
    "pastebin": "<iframe src='https://pastebin.com/embed_iframe/4ajnL4LK' style='border:none;width:100%'></iframe>",
  }
},
]